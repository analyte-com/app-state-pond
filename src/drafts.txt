DROP VIEW vTASKTREE;
GO

CREATE VIEW vTasksTree AS
WITH HierarchyCTE AS (
    -- Base case: root nodes (IDTAR1 = -1)
    SELECT 
        IDLISTA,
        IDTARRAIZ,
        IDTAR1,
        IDTAR,
        SECUENCIA,
        NOMTAR2,
        PRIORIDAD,
        REPETICION,
        COMENTARIO,
        NIVEL,
        IDLISTA AS IDROOT,
        CAST(RTRIM(NOMTAR2) AS VARCHAR(1000)) AS fullName  -- Explicit CAST with sufficient length
    FROM 
        [dbo].[LISTA_TAR]
    WHERE 
        IDTAR1 = -1
    
    UNION ALL
    
    -- Recursive case: child nodes
    SELECT 
        c.IDLISTA,
        c.IDTARRAIZ,
        c.IDTAR1,
        c.IDTAR,
        c.SECUENCIA,
        c.NOMTAR2,
        c.PRIORIDAD,
        c.REPETICION,
        c.COMENTARIO,
        c.NIVEL,
        p.IDROOT,
        CAST(p.fullName + ' / ' + RTRIM(c.NOMTAR2) AS VARCHAR(1000))  -- Same CAST in recursive part
    FROM 
        [dbo].[LISTA_TAR] c
    INNER JOIN 
        HierarchyCTE p ON c.IDTAR1 = p.IDLISTA
    WHERE 
        c.IDTAR1 <> -1
)
SELECT 
  tree.IDLISTA as id
  ,tree.IDROOT rootId
  ,tree.IDTAR1 parentId
  ,tree.SECUENCIA as sequence
  ,tree.NIVEL as level
  ,tree.FULLNAME as description
  ,tree.PRIORIDAD as priority
  ,tree.REPETICION as repetition
  ,tree.IDTARRAIZ as taskRootId
  ,tree.IDTAR as taskId
  ,tree.NOMTAR2 as taskName
  ,case 
		when tree.COMENTARIO IS NULL then ''
		else tree.COMENTARIO 
	end as comment
	,case 
		when tree.IDLISTA = -1 then tree.NOMTAR2
		else rtrim(cast(troot.NOMTAR2 as varchar))+'/'+right('000'+cast(tree.SECUENCIA as varchar),3)
	end as ordering
FROM 
    HierarchyCTE tree
	left outer join HierarchyCTE troot on troot.IDLISTA = tree.IDROOT
ORDER by ordering asc	
;

select count(*) from lista_tar;
select count(*) from vTasksTree;
